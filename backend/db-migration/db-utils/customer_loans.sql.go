// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: customer_loans.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCustomerLoan = `-- name: CreateCustomerLoan :one
INSERT INTO customer_loans(
    id,
    customer_id,
    loan_amount,
    paid_amount,
    remaining_amount,
    amount_to_be_paid,
    principal,
    loan_time,
    rate,
    interest,
    due_date,
    user_id,
    created_at,
    updated_at,
    is_deleted,
    deleted_at
)VALUES(
    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16
)RETURNING id, customer_id, loan_amount, paid_amount, interest, principal, loan_time, amount_to_be_paid, rate, due_date, remaining_amount, user_id, created_at, updated_at, is_deleted, deleted_at
`

type CreateCustomerLoanParams struct {
	ID              uuid.UUID `json:"id"`
	CustomerID      uuid.UUID `json:"customer_id"`
	LoanAmount      string    `json:"loan_amount"`
	PaidAmount      string    `json:"paid_amount"`
	RemainingAmount string    `json:"remaining_amount"`
	AmountToBePaid  string    `json:"amount_to_be_paid"`
	Principal       string    `json:"principal"`
	LoanTime        string    `json:"loan_time"`
	Rate            string    `json:"rate"`
	Interest        string    `json:"interest"`
	DueDate         string    `json:"due_date"`
	UserID          uuid.UUID `json:"user_id"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
	IsDeleted       bool      `json:"is_deleted"`
	DeletedAt       time.Time `json:"deleted_at"`
}

func (q *Queries) CreateCustomerLoan(ctx context.Context, arg CreateCustomerLoanParams) (CustomerLoan, error) {
	row := q.db.QueryRow(ctx, createCustomerLoan,
		arg.ID,
		arg.CustomerID,
		arg.LoanAmount,
		arg.PaidAmount,
		arg.RemainingAmount,
		arg.AmountToBePaid,
		arg.Principal,
		arg.LoanTime,
		arg.Rate,
		arg.Interest,
		arg.DueDate,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsDeleted,
		arg.DeletedAt,
	)
	var i CustomerLoan
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.LoanAmount,
		&i.PaidAmount,
		&i.Interest,
		&i.Principal,
		&i.LoanTime,
		&i.AmountToBePaid,
		&i.Rate,
		&i.DueDate,
		&i.RemainingAmount,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}

const getAllLoans = `-- name: GetAllLoans :many
SELECT id, customer_id, loan_amount, paid_amount, interest, principal, loan_time, amount_to_be_paid, rate, due_date, remaining_amount, user_id, created_at, updated_at, is_deleted, deleted_at FROM customer_loans
`

func (q *Queries) GetAllLoans(ctx context.Context) ([]CustomerLoan, error) {
	rows, err := q.db.Query(ctx, getAllLoans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomerLoan{}
	for rows.Next() {
		var i CustomerLoan
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.LoanAmount,
			&i.PaidAmount,
			&i.Interest,
			&i.Principal,
			&i.LoanTime,
			&i.AmountToBePaid,
			&i.Rate,
			&i.DueDate,
			&i.RemainingAmount,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLoanByCustomerId = `-- name: GetLoanByCustomerId :many
SELECT id, customer_id, loan_amount, paid_amount, interest, principal, loan_time, amount_to_be_paid, rate, due_date, remaining_amount, user_id, created_at, updated_at, is_deleted, deleted_at FROM customer_loans WHERE customer_id = $1 AND is_deleted = False
`

func (q *Queries) GetLoanByCustomerId(ctx context.Context, customerID uuid.UUID) ([]CustomerLoan, error) {
	rows, err := q.db.Query(ctx, getLoanByCustomerId, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomerLoan{}
	for rows.Next() {
		var i CustomerLoan
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.LoanAmount,
			&i.PaidAmount,
			&i.Interest,
			&i.Principal,
			&i.LoanTime,
			&i.AmountToBePaid,
			&i.Rate,
			&i.DueDate,
			&i.RemainingAmount,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLoanTransaction = `-- name: UpdateLoanTransaction :exec
UPDATE customer_loans SET
    paid_amount = $1,
    loan_amount = $2,
    remaining_amount = $3,
    user_id = $4,
    principal = $5,
    interest = $6,
    due_date = $7,
    rate = $8,
    updated_at = NOW()
WHERE customer_id = $9
`

type UpdateLoanTransactionParams struct {
	PaidAmount      string    `json:"paid_amount"`
	LoanAmount      string    `json:"loan_amount"`
	RemainingAmount string    `json:"remaining_amount"`
	UserID          uuid.UUID `json:"user_id"`
	Principal       string    `json:"principal"`
	Interest        string    `json:"interest"`
	DueDate         string    `json:"due_date"`
	Rate            string    `json:"rate"`
	CustomerID      uuid.UUID `json:"customer_id"`
}

func (q *Queries) UpdateLoanTransaction(ctx context.Context, arg UpdateLoanTransactionParams) error {
	_, err := q.db.Exec(ctx, updateLoanTransaction,
		arg.PaidAmount,
		arg.LoanAmount,
		arg.RemainingAmount,
		arg.UserID,
		arg.Principal,
		arg.Interest,
		arg.DueDate,
		arg.Rate,
		arg.CustomerID,
	)
	return err
}
