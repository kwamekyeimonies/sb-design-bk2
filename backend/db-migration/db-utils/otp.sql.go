// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: otp.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOTP = `-- name: CreateOTP :one
INSERT INTO otp(
    id,
    user_id,
   is_verified,
    verfied_date,
    created_at,
    updated_at,
    expiry_time,
    secret
)VALUES(
    $1,$2,$3,$4,$5,$6,$7,$8
)RETURNING id, user_id, secret, is_verified, expiry_time, verfied_date, created_at, updated_at
`

type CreateOTPParams struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	IsVerified  bool      `json:"is_verified"`
	VerfiedDate time.Time `json:"verfied_date"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	ExpiryTime  time.Time `json:"expiry_time"`
	Secret      string    `json:"secret"`
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) (Otp, error) {
	row := q.db.QueryRow(ctx, createOTP,
		arg.ID,
		arg.UserID,
		arg.IsVerified,
		arg.VerfiedDate,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiryTime,
		arg.Secret,
	)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Secret,
		&i.IsVerified,
		&i.ExpiryTime,
		&i.VerfiedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOTPByUserID = `-- name: GetOTPByUserID :one
SELECT id, user_id, secret, is_verified, expiry_time, verfied_date, created_at, updated_at FROM otp WHERE user_id = $1
`

func (q *Queries) GetOTPByUserID(ctx context.Context, userID uuid.UUID) (Otp, error) {
	row := q.db.QueryRow(ctx, getOTPByUserID, userID)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Secret,
		&i.IsVerified,
		&i.ExpiryTime,
		&i.VerfiedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOTP = `-- name: UpdateOTP :exec
UPDATE otp
SET 
    secret = $1,
    expiry_time=$2 ,
     is_verified = $3
WHERE id = $4
`

type UpdateOTPParams struct {
	Secret     string    `json:"secret"`
	ExpiryTime time.Time `json:"expiry_time"`
	IsVerified bool      `json:"is_verified"`
	ID         uuid.UUID `json:"id"`
}

func (q *Queries) UpdateOTP(ctx context.Context, arg UpdateOTPParams) error {
	_, err := q.db.Exec(ctx, updateOTP,
		arg.Secret,
		arg.ExpiryTime,
		arg.IsVerified,
		arg.ID,
	)
	return err
}
