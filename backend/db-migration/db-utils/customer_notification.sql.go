// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: customer_notification.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCustomerNotification = `-- name: CreateCustomerNotification :one
INSERT INTO  customer_notification(
    id,
    customer_id,
    user_id,
    customer_account_id,
    transaction_type,
    message,
    amount,
    current_amount,
    created_at,
    updated_at,
    is_deleted,
    deleted_at
)VALUES(
    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12
)RETURNING id, customer_id, user_id, customer_account_id, transaction_type, message, amount, current_amount, created_at, updated_at, is_deleted, deleted_at
`

type CreateCustomerNotificationParams struct {
	ID                uuid.UUID `json:"id"`
	CustomerID        uuid.UUID `json:"customer_id"`
	UserID            uuid.UUID `json:"user_id"`
	CustomerAccountID uuid.UUID `json:"customer_account_id"`
	TransactionType   string    `json:"transaction_type"`
	Message           string    `json:"message"`
	Amount            string    `json:"amount"`
	CurrentAmount     string    `json:"current_amount"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
	IsDeleted         bool      `json:"is_deleted"`
	DeletedAt         time.Time `json:"deleted_at"`
}

func (q *Queries) CreateCustomerNotification(ctx context.Context, arg CreateCustomerNotificationParams) (CustomerNotification, error) {
	row := q.db.QueryRow(ctx, createCustomerNotification,
		arg.ID,
		arg.CustomerID,
		arg.UserID,
		arg.CustomerAccountID,
		arg.TransactionType,
		arg.Message,
		arg.Amount,
		arg.CurrentAmount,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsDeleted,
		arg.DeletedAt,
	)
	var i CustomerNotification
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.UserID,
		&i.CustomerAccountID,
		&i.TransactionType,
		&i.Message,
		&i.Amount,
		&i.CurrentAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}
